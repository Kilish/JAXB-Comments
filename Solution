
import java.util.*;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
@XmlType(name = "shop")
@XmlRootElement
class Shop{
	public Goods goods;
	public int count;
	public double profit;
	public String[] secretData;
	
	public Shop(){
		this.goods = new Goods();
		this.secretData = new String[2];
	}
	static class Goods{
		public Goods(){
			this.names = new ArrayList<String>();
		}
		public ArrayList<String> names;
	}

}

public class JavaRush {
	
	public static void main(String[] args) throws JAXBException {
		Shop shop = new Shop();
		shop.count = 7;
		shop.goods.names.add("Goods 1");
		shop.profit = 3.14;
		shop.secretData[0] = "*****";
		shop.secretData[1] = "**";

		System.out.println(toXmlWithComment(shop,"secretData","Comment"));
    }
	public static String toXmlWithComment(Object obj, String tagName, String comment)  throws JAXBException{
		  try {

	            JAXBContext context = JAXBContext.newInstance(obj.getClass());
	            Marshaller marshaller = context.createMarshaller();
	            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
	            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
	            marshaller.marshal(obj, doc);

	            NodeList nodes = doc.getElementsByTagName("*");

	            for (int i = 0; i < nodes.getLength(); i++) {
	                Node node = nodes.item(i);

	                if (node.getNodeName().equals(tagName)) {
	                    Comment com = doc.createComment(comment);
	                    node.getParentNode().insertBefore(com, node);
	                }
	                replaceTextWithCDATA(node, doc);
	            }
	            Transformer transformer = TransformerFactory.newInstance().newTransformer();
	            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

	            StringWriter sw = new StringWriter();
	            transformer.transform(new DOMSource(doc), new StreamResult(sw));
	            return sw.toString();

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return null;
    }
	private static void replaceTextWithCDATA(Node node, Document doc) {
        if ((node.getNodeType() == 3) && (Pattern.compile("[<>&'\"]").matcher(node.getTextContent()).find())) {

            Node cnode = doc.createCDATASection(node.getNodeValue());
            node.getParentNode().replaceChild(cnode, node);
        }

        NodeList list = node.getChildNodes();

        for (int i = 0; i < list.getLength(); i++) {
            replaceTextWithCDATA(list.item(i), doc);
        }
    }
}
